name: Default - Release
on:
  push:
    tags:
      - 'components/*/v*.*.*'

jobs:
  Extract:
    name: Extract
    runs-on: ubuntu-latest
    outputs:
      service: ${{ steps.extract.outputs.service }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Extract service name
        id: extract
        run: echo "service=$(node .github/actions/extract-service-in-tag/index.js ${{ github.ref_name }})" >> $GITHUB_OUTPUT

  Lint:
    runs-on: ubuntu-latest
    needs:
      - Extract
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'components/${{ needs.Extract.outputs.service }}/go.mod'
          cache-dependency-path: 'components/${{ needs.Extract.outputs.service }}/go.sum'
          cache: true
      - run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.50.1
      - run: task ${{ needs.Extract.outputs.service }}:lint

  Tests:
    runs-on: ubuntu-latest
    needs:
      - Extract
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'components/${{ needs.Extract.outputs.service }}/go.mod'
          cache-dependency-path: 'components/${{ needs.Extract.outputs.service }}/go.sum'
          cache: true
      - run: task ${{ needs.Extract.outputs.service }}:tests

  GoReleaser:
    name: GoReleaser
    runs-on: ubuntu-latest
    needs:
      - Extract
      - Tests
      - Lint
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'components/${{ needs.Extract.outputs.service }}/go.mod'
          cache-dependency-path: 'components/${{ needs.Extract.outputs.service }}/go.sum'
          cache: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: "NumaryBot"
          password: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - run: go mod download
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser-pro
          version: latest
          args: release --rm-dist -f components/${{ needs.Extract.outputs.service }}/.goreleaser.yml
        env:
          GITHUB_TOKEN: ${{ secrets.NUMARY_GITHUB_TOKEN }}
          FURY_TOKEN: ${{ secrets.FURY_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

  Docker:
    runs-on: ubuntu-latest
    needs:
      - Extract
      - Tests
      - Lint
    steps:
      - uses: actions/checkout@v3
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: "NumaryBot"
          password: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: ./components/${{ needs.Extract.outputs.service }}/Dockerfile
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/formancehq/${{ needs.Extract.outputs.service }}:${{ github.event.pull_request.head.sha }}
          build-args: |
            APP_SHA=${{ github.event.pull_request.head.sha }}
            VERSION=develop
